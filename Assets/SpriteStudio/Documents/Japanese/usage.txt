=============================================================================
 SpriteStudioPlayer for Unity

 Copyright(C) 2003-2013 Web Technology Corp.
=============================================================================

-----------------------------------------------------------------------------
■インストール方法

  Unity の新規プロジェクトに追加する手順で説明します。

  ・Unityを起動します。

  ・File -> New Project で適当な名前のプロジェクトをCreateしてください。

  ・Assets -> Import Package -> Custom Package... でSSforUnity の
    パッケージファイル(SpriteStudio.unitypackage)
    を選択して下さい。

  ・ダイアログが表示されますのですべてのファイルにチェックマークが付いているこ
    とを確認し、Import ボタンを押してください。
    何もエラーが出なければインポート完了です。
  
    ★インポート途中で文字化けしたテキストと共にインポート失敗の確認ダイアログ
      が表示された場合 Try Again ボタンを押して処理を続行してみてください。
      何度やっても続行できない場合はお手数をおかけしますがお問い合わせください。

  Project ツリーの Samples/Scenes/
  の中のGameSceneをダブルクリックしてシーンを開き再生ボタンを押してください。
  （GameSceneサンプルではゲームスクリプトで動的にアニメーションデータを表示させ
    ているため、再生前のシーン上には何も表示されません。）

  コンソールウィンドウにエラーが出ることなく、棒を持った女の子キャラ
  （こみぽちゃん）とハチが表示されれば問題ありません。


-----------------------------------------------------------------------------
■データベースファイルとアニメーションデータのプレハブについて

SpriteStudioDatabase

	プロジェクトにインポート済みのSpriteStudioアニメーションデータのリストや
	インポート時の設定情報などが格納されています。
	
	このファイルはアニメーションデータのインポート時に自動生成・更新されます。
	アニメーションデータを削除するとリストから除外されます。
	
	【用途】
	
	シーン内に配置されていないアニメーションデータをスクリプトから実行時に指定
	したい場合にこのリストをシーンに追加して使用します。
	
	【インスペクタの説明】
	
	AnimeList	下記のボタンによりアニメーションリストを変更します。

		Pickup	シーン内に配置されているスプライトオブジェクトにアタッチされた
				アニメーションをリストに追加します。
		
		Add		リストの末尾に１項目追加します。
		
		Clear	リストをクリアします。
		
		Instantiate		選択したファイルがプレハブの場合インスタンス化したもの
						をシーンに追加します。

	【ご注意】
	
	シーン内に当ファイルが存在する場合、このファイルが持つリストに登録されたア
	ニメーションはすべてパブリッシュされたデータに含まれるため、不要なアニメー
	ションデータが含まれているとデータサイズが肥大化します。
	
	その場合はプロジェクト内にあるSpriteStudioDatabaseプレハブをシーンにドロッ
	プする代わりに、SpriteStudio メニューの Create Database を選択し、
	Anime List に必要なアニメーションだけ登録する様にして下さい。
	
	※シーン内に存在するGameObjectにアタッチされたスクリプトがシリアライズ対象
	  の SsAnimation 型のフィールドを持っており、そこに使用するアニメーション
	  が静的に設定されている場合はこの限りではありません。

	※プロジェクトフォルダ内にあるこのファイル自体を削除しても復活するようにな
	  っています。
	
SpriteStudioPrefabs

	アニメーションデータをインポートするとそのアニメーションに関連付けられたゲ
	ームオブジェクトのプレハブが自動的にこのフォルダ内に作成されます。
	
	ここに作られたプレハブファイルは参照しているアニメデータを削除しても自動的
	に削除されることはありません。

-----------------------------------------------------------------------------
■アニメーションデータのインポート手順

・.ssaxファイルと参照しているイメージファイルをプロジェクトビューの任意のフォ
  ルダにドロップします。

  ※.ssax 内に記述されているイメージファイルのパスは相対なので、
    .ssax ファイルとイメージファイルの位置関係は変えないでください。
  
  ※インポート時に "can't load image" というエラーメッセージが表示された場合は
    イメージファイルを先にインポートした後、.ssax ファイルをインポートしてみて
    下さい。

・ドロップしたフォルダ位置に assets というサブフォルダが作成され、フォルダ中に
    アニメーションファイル名_ssa
    参照しているイメージファイル名_Mat_*
  が作られていれば成功です。

・再インポートについて
  *_ssa ファイルを選択するとインスペクタ上部に Reimport ボタンが表示されます。
  このボタンを押すことで再インポートすることができます。
  Original Path 項目がインポート元のアニメーションファイルのパスです。
  
  ※.ssax ファイルの場所を移動した場合は Original Path の内容が更新されないため
    Reimport ボタンで更新できなくなります。
    その場合は一度 .ssax を選択して右クリックからReimportを行なって下さい。

・スケーリングについて

  ScaleFactor にチェックを付け任意の値を入力してから、再インポートする事でアニ
  メーションデータのサイズをスケーリングできます。
  
  チェックが付いていない状態では SpriteStudio->Settings の設定を参照します。

-----------------------------------------------------------------------------
■アニメーションの再生方法

●プレハブを使った方法

アニメーションデータが正しくインポートされるとプロジェクトツリーのルートの
SpriteStudioPrefabsフォルダに該当のアニメーションデータがアタッチされたゲーム
オブジェクトのプレハブが作成されているはずです。
これをヒエラルキにドロップすれば再生が可能になります。

●ゲームオブジェクトから作成する方法

メニューのSpriteStudio -> Create Sprite または
ヒエラルキビューの上部にある Create メニューから Sprite Studio -> Sprite
を選択することでシーンにスプライトのスクリプトがアタッチされた
ゲームオブジェクトが作成されます。

インスペクタ上の Animation 右のポップアップリストから再生したいアニメーション
を選択することで再生できる状態になります。

この状態で再生ボタンを押せばアニメーションが再生されます。

-----------------------------------------------------------------------------
■インスペクタの操作方法

「アニメーションの再生方法」の手順で作成されたゲームオブジェクトを選択すると、
インスペクタに SsSprite のロールが追加されているはすです。

ここに表示されている項目について説明します。

Animation			現在アタッチされているアニメーション名です。
					Edit.. ボタンを押すと参照しているアニメーションデータ
					にジャンプします。

HFlip				水平方向の反転フラグです

VFlip				垂直方向の反転フラグです

Anime Frame			現在表示しているアニメーションのフレーム値です。

Start Anime Frame	再生開始フレームです。
					変更するとAnime Frameも連動して更新されます。

End Anime Frame		再生終了フレームです。
					変更するとAnime Frameも連動して更新されます。

Play Direction		再生方向とループの指定です。

					Forward				順方向（デフォルト）です。
					Reverse				逆方向
					RoundTrip			往復
					ReverseRoundTrip	逆方向からの往復

Play Count			プレイ回数です。0 で無限ループになります。

Speed				再生スピードです。

PlayAtStart			初期化完了後、アニメ変更後に自動的に再生を開始します。

DestroyAtEnd		アニメーション終了時にスプライトオブジェクトを削除します。

LifeTime			スプライトオブジェクトを自動的に削除するまでの時間を秒単位
					で指定します。
					Update() 呼び出しが始まってから計測が開始されます。
					ポーズ中も計測されます。
					0 を指定した場合は何もしません。

UpdateCollider		コライダの当たり判定領域の自動更新フラグです。
					チェックを付けるとアニメーションによってメッシュが変形した
					際に当たり判定の領域も自動的に更新します。
					
					詳しくは script.txt の SsSprite の項目を
					参照して下さい。

--------------------------
以下はデバッグ用の項目です

Draw Bounding Box	パーツ全体を囲むバウンディングボックスを赤枠で表示します。
					シーンビューの上部にある Gizmos を有効になっていないと表示
					されません。

Draw Bounding Parts	当たり判定パーツを含んでいる場合そのパーツの境界を緑の枠で
					表示します。
					SsSprite.useAABB を true にした場合の領域は赤枠で表示され
					ます。

-----------------------------------------------------------------------------
■SpriteStudio メニューについて

本アセットをインポートすると Unity 上部のメニューに SpriteStudio という項目が
追加されます。

Create Sprite
	アニメーションが指定されていないスプライトオブジェクトをシーンに追加します。

Create Database
	SpriteStudioDatabase をカレントシーンに追加します。

Cleanup Prefabs
	SpriteStudioPrefabs の中のアニメーションが無効になっているプレハブを削除し
	ます。

Settings	
	Scale Factor	インポート時のパーツサイズにかける拡大率です。
	
	Close ボタンを押すと変更が適用されます。

About
	SpriteStudioPlayer Version がプラグインのバージョンです。
	Ssax File Version は現在プラグインで読み込みが可能な.ssaxファイルのバージ
	ョンです。

-----------------------------------------------------------------------------
■インポートするデータに関する注意点

●参照するイメージ(テクスチャ)について

  ・テクスチャの幅、高さは予め２のべき乗に広げておいてください。
    
    ２のべき乗になっていない場合は、インポータによってテクスチャの幅、高さは
    上方、もしくは下方にスケーリングされます。
    その結果、画像が荒くなったりＵＶ値に微妙な誤差が生じて意図しないピクセルが
    描画されやすくなります。
    そのため予め２のべき乗に広げることでスケーリングが発生しないようにすること
    を推奨します。
    
    ２のべき乗ではなく、スケーリングしても構わない場合は下記の方法で上方下方ど
    ちらに合わせるかを任意に指定可能です。
    テクスチャインポータのデフォルト設定は近い方にスケールされるため、例えば幅
    が１９１ピクセルの場合は１２８に縮められます。
    この場合に２５６にスケールするには、プロジェクトツリー上でテクスチャファイ
    ルを選択しTexture Importer の設定を下記のように変更します。
    
    Texture Type:	Advanced
    Non Power of 2:	ToLarger

    として、Apply ボタンを押します。

  ・パレットは非対応ですのでダイレクトカラーで保存してください。
  
  ★透明色が抜けない場合の対処方法：
 
  ・.png の透過色指定はUnityが認識しないのでアルファチャンネルを作って対処して
    ください。
  
  ・32bit形式の.bmp の場合、SpriteStudio 上では透明色が想定通りに認識されても、
    Unityでは認識されない可能性があります。

  ★DXT5で完全透明部分の色がピクセルに混じってしまう場合の対処方法：
  
    原因はUnity上でインポートしたテクスチャファイルをDXTCへ変換する際に完全透
    明色のピクセルが使用色として取り込まれてしまうことにあります。

    この場合、OPTPiX imesta など完全透明色の色漏れ防止機能を持った画像変換ツー
    ルで、事前にDXT5形式に変換しておくことで回避することが可能です。
    ※SpriteStudio はDXTC形式の読み込みに対応しています。
    ※ただしiOSではDXTC形式には非対応ですのでご注意下さい。

  ★スプライトの端に意図しない線や色が出る場合の対処方法：

    テクスチャのサンプリングモードがPointではない場合に発生する可能性がありま
    す。
    
    プロジェクトビューで問題のテクスチャファイルを選択し、インスペクタの
    Wrap Mode をClampにすることで解消される場合があります。
    
    それでも解消されない場合はパーツの切り出し範囲を１ピクセル内側にずらすか、
    パーツの切り出し範囲の周囲１ピクセルに範囲内と同じピクセルを置くようにして
    下さい。
  
【注意】
  Unity でのインポート時の動作や画像フォーマットの対応状況はVer3.4時点で確認し
  たものになります。

-----------------------------------------------------------------------------
■カメラの設定について

カメラの設定は何も変更しないため任意での設定をお願いします。

初めてシーンにスプライトを配置したにも関わらず Game ビューで何も表示されない場
合はメインカメラの Projection を Orthographic にして、Size を400程度にすれば画
面内に表示されると思います。

このサイズはパブリッシュ予定のプラットフォームの解像度に応じて適切な値に調整し
てください。
※表示したいビューポートの縦サイズの半分程度にすればピクセル等倍に近くなります。

またXY軸の回転を行う場合はNearクリップ面を手前にしないと欠けてしまいます。
この場合Clipping Planes の Near を-1000程度にしてみてください。

-----------------------------------------------------------------------------
■コライダについて

BoxCollider, SphereCollider, CapsuleCollider に対応しています。

BoxCollider を適用する場合はすり抜けを防止するため、Size の z 値を１以上に設定
して下さい。

アニメーションに合わせた当たり判定領域の自動更新については、script.txt の 
■SsSprite のUpdateCollider プロパティを参照してください。

-----------------------------------------------------------------------------
■その他の注意事項

●Cleaning up leaked objects in scene ... というメッセージについて

  Cleaning up leaked objects in scene since no game object, 
  component or manager is referencing them
  Material has been leaked ? times.
  Mesh has been leaked ? times.
  
  シーンの保存時に上記の様なメッセージが出る場合がありますが、これはエディット
  モードでアニメーション表示を行っているために出ているもので、リソースリークが
  蓄積することはなく実行時には問題にならないはずです。
  
●__SsShaderKeeper_DoNotDeleteMe について

  スクリプトによって実行時にシェーダを書き換えたいような場合には、シーン内に使
  用するシェーダを参照するオブジェクトが配置されていないと、ビルドされたデータ
  内にシェーダが含まれず利用できない状況になってしまいます。
  
  この状況は__SsShaderKeeper_DoNotDeleteMe プレハブをビルド対象となるシーンの
  いずれか１つに配置しておくことで回避できます。
  
  Resources フォルダに入れておくことでも対応が可能ですが、ビルド後のシェーダ
  部分ののデータサイズが前述の方法に比べておよそ３倍程度になりますので、対応す
  シーンに配置しておく方が望ましいようです。

  ※この挙動は Unity 3.5.1f2 で確認したものです。

●スプライトオブジェクト選択状態での再生負荷について

  スプライトオブジェクトを選択した状態でプレイ開始すると、インスペクタの更新処
  理の負荷が原因で、表示処理が重い状態になります。
  
  気になる場合は予めフォーカスを外しておくようお願いします。



=============================================================================
株式会社ウェブテクノロジ
http://www.webtech.co.jp/
Copyright(C) 2003-2013 Web Technology Corp.
=============================================================================

* SpriteStudio, Web Technologyは、株式会社ウェブテクノロジの登録商標です。
* その他の商品名は各社の登録商標または商標です。

[End of TEXT]
